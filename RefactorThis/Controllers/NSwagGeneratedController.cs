//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace RefactorThis.Controllers
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IProductController
    {
        /// <summary>Retrieve products</summary>
        /// <param name="name">The name (full or partial) of the product you would like to search for</param>
        /// <returns>Products Retrieved</returns>
        System.Threading.Tasks.Task<ProductsRetrievedResponse> GetProductsAsync(string name, int? limit, int? offset);
    
        /// <summary>Create a new product</summary>
        /// <returns>Product Created</returns>
        System.Threading.Tasks.Task<ProductCreatedResponse> CreateProductAsync(CreateOrUpdateProductRequest body);
    
        /// <summary>Retrieve a product</summary>
        /// <param name="id">The product Id</param>
        /// <returns>Product Retrieved</returns>
        System.Threading.Tasks.Task<Product> GetProductAsync(System.Guid id);
    
        /// <summary>Update a product</summary>
        /// <param name="id">The product Id</param>
        /// <returns>Product Updated</returns>
        System.Threading.Tasks.Task UpdateProductAsync(System.Guid id, CreateOrUpdateProductRequest body);
    
        /// <summary>Delete a product and associated options</summary>
        /// <param name="id">The product Id</param>
        /// <returns>Product Deleted</returns>
        System.Threading.Tasks.Task DeleteProductAsync(System.Guid id);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ProductController : Controller
    {
        private IProductController _implementation;
    
        public ProductController(IProductController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Retrieve products</summary>
        /// <param name="name">The name (full or partial) of the product you would like to search for</param>
        /// <returns>Products Retrieved</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/products")]
        public System.Threading.Tasks.Task<ProductsRetrievedResponse> GetProducts(string name, int? limit, int? offset)
        {
            return _implementation.GetProductsAsync(name, limit, offset);
        }
    
        /// <summary>Create a new product</summary>
        /// <returns>Product Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/products")]
        public System.Threading.Tasks.Task<ProductCreatedResponse> CreateProduct([Microsoft.AspNetCore.Mvc.FromBody] CreateOrUpdateProductRequest body)
        {
            return _implementation.CreateProductAsync(body);
        }
    
        /// <summary>Retrieve a product</summary>
        /// <param name="id">The product Id</param>
        /// <returns>Product Retrieved</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/products/{id}")]
        public System.Threading.Tasks.Task<Product> GetProduct(System.Guid id)
        {
            return _implementation.GetProductAsync(id);
        }
    
        /// <summary>Update a product</summary>
        /// <param name="id">The product Id</param>
        /// <returns>Product Updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("api/products/{id}")]
        public System.Threading.Tasks.Task UpdateProduct(System.Guid id, [Microsoft.AspNetCore.Mvc.FromBody] CreateOrUpdateProductRequest body)
        {
            return _implementation.UpdateProductAsync(id, body);
        }
    
        /// <summary>Delete a product and associated options</summary>
        /// <param name="id">The product Id</param>
        /// <returns>Product Deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("api/products/{id}")]
        public System.Threading.Tasks.Task DeleteProduct(System.Guid id)
        {
            return _implementation.DeleteProductAsync(id);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IOptionController
    {
        /// <summary>Retrieve options for a specific product</summary>
        /// <param name="productId">Product Id</param>
        /// <returns>Options Retrieved</returns>
        System.Threading.Tasks.Task<OptionsRetrievedResponse> GetOptionsAsync(System.Guid productId);
    
        /// <summary>Add a new product option to the specified product</summary>
        /// <param name="productId">Product Id</param>
        /// <returns>Option Added</returns>
        System.Threading.Tasks.Task<OptionAddedResponse> AddOptionAsync(System.Guid productId, CreateOrUpdateOptionRequest body);
    
        /// <summary>Find the specific product option for the specific product</summary>
        /// <param name="productId">Product Id</param>
        /// <param name="optionId">Product Id</param>
        /// <returns>Product Option Retrieved</returns>
        System.Threading.Tasks.Task<Option> GetOptionAsync(System.Guid productId, System.Guid optionId);
    
        /// <summary>Update the specified product option</summary>
        /// <param name="productId">The product Id</param>
        /// <param name="optionId">Product Id</param>
        /// <returns>Option Updated</returns>
        System.Threading.Tasks.Task UpdateOptionAsync(System.Guid productId, System.Guid optionId, CreateOrUpdateOptionRequest body);
    
        /// <summary>Delete the specific option</summary>
        /// <param name="productId">The product Id</param>
        /// <param name="optionId">Product Id</param>
        /// <returns>Product Deleted</returns>
        System.Threading.Tasks.Task DeleteOptionAsync(System.Guid productId, System.Guid optionId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class OptionController : Controller
    {
        private IOptionController _implementation;
    
        public OptionController(IOptionController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Retrieve options for a specific product</summary>
        /// <param name="id">Product Id</param>
        /// <returns>Options Retrieved</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/products/{id}/options")]
        public System.Threading.Tasks.Task<OptionsRetrievedResponse> GetOptions(System.Guid id)
        {
            return _implementation.GetOptionsAsync(id);
        }
    
        /// <summary>Add a new product option to the specified product</summary>
        /// <param name="id">Product Id</param>
        /// <returns>Option Added</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/products/{id}/options")]
        public System.Threading.Tasks.Task<OptionAddedResponse> AddOption(System.Guid id, [Microsoft.AspNetCore.Mvc.FromBody] CreateOrUpdateOptionRequest body)
        {
            return _implementation.AddOptionAsync(id, body);
        }
    
        /// <summary>Find the specific product option for the specific product</summary>
        /// <param name="id">Product Id</param>
        /// <param name="optionId">Product Id</param>
        /// <returns>Product Option Retrieved</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/products/{id}/options/{optionId}")]
        public System.Threading.Tasks.Task<Option> GetOption(System.Guid id, System.Guid optionId)
        {
            return _implementation.GetOptionAsync(id, optionId);
        }
    
        /// <summary>Update the specified product option</summary>
        /// <param name="id">The product Id</param>
        /// <param name="optionId">Product Id</param>
        /// <returns>Option Updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("api/products/{id}/options/{optionId}")]
        public System.Threading.Tasks.Task UpdateOption(System.Guid id, System.Guid optionId, [Microsoft.AspNetCore.Mvc.FromBody] CreateOrUpdateOptionRequest body)
        {
            return _implementation.UpdateOptionAsync(id, optionId, body);
        }
    
        /// <summary>Delete the specific option</summary>
        /// <param name="id">The product Id</param>
        /// <param name="optionId">Product Id</param>
        /// <returns>Product Deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("api/products/{id}/options/{optionId}")]
        public System.Threading.Tasks.Task DeleteOption(System.Guid id, System.Guid optionId)
        {
            return _implementation.DeleteOptionAsync(id, optionId);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateOrUpdateProductRequest 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeliveryPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeliveryPrice { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateOrUpdateProductRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateOrUpdateProductRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProductsRetrievedResponse 
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Product> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductsRetrievedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductsRetrievedResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProductCreatedResponse 
    {
        /// <summary>Product Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductCreatedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductCreatedResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OptionsRetrievedResponse 
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Option> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OptionsRetrievedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OptionsRetrievedResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OptionAddedResponse 
    {
        /// <summary>Option Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OptionAddedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OptionAddedResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateOrUpdateOptionRequest 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateOrUpdateOptionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateOrUpdateOptionRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Product 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeliveryPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal DeliveryPrice { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Product FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Product>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Option 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Option FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Option>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108